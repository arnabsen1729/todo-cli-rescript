// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Os = require("os");
var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Int = require("bs-platform/lib/js/belt_Int.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");

var getToday = (function() {
  let date = new Date();
  return new Date(date.getTime())
    .toISOString()
    .split("T")[0];
});

var encoding = "utf8";

var pendingTodosFile = "todo.txt";

var completedTodosFile = "done.txt";

var help = "Usage :-\n$ ./todo add \"todo item\"  # Add a new todo\n$ ./todo ls               # Show remaining todos\n$ ./todo del NUMBER       # Delete a todo\n$ ./todo done NUMBER      # Complete a todo\n$ ./todo help             # Show usage\n$ ./todo report           # Statistics".trim();

function removeEmpty(lines) {
  return Belt_Array.keep(lines, (function (line) {
                return line.length !== 0;
              }));
}

function readTodos(filename) {
  if (Fs.existsSync(filename)) {
    return removeEmpty(Fs.readFileSync(filename, {
                      encoding: encoding,
                      flag: "r"
                    }).split(Os.EOL));
  } else {
    Fs.writeFileSync(filename, "", {
          encoding: encoding,
          flag: "w"
        });
    return [];
  }
}

function writeTodos(filename, todos) {
  var todoText = todos.join(Os.EOL);
  Fs.writeFileSync(filename, todoText, {
        encoding: encoding,
        flag: "w"
      });
  
}

function updateFile(filename, updater) {
  var contents = readTodos(filename);
  return writeTodos(filename, Curry._1(updater, contents));
}

function appendTodos(filename, todo) {
  Fs.appendFileSync(filename, todo + Os.EOL, {
        encoding: encoding,
        flag: "a"
      });
  
}

function deleteItem(arr, delIndex) {
  return Belt_Array.reduceWithIndex(arr, [], (function (acc, element, index) {
                if (index !== delIndex) {
                  return [element].concat(acc);
                } else {
                  return acc;
                }
              }));
}

function cmdLs(param) {
  var todos = readTodos(pendingTodosFile);
  if (todos.length === 0) {
    console.log("There are no pending todos!");
    return ;
  }
  var parsedTodos = Belt_Array.reverse(Belt_Array.mapWithIndex(todos, (function (index, todo) {
              return "[" + String(index + 1 | 0) + "] " + todo;
            })));
  console.log(parsedTodos.join(Os.EOL));
  
}

function cmdAddTodo(newTodos) {
  if (newTodos.length === 0) {
    console.log("Error: Missing todo string. Nothing added!");
  } else {
    updateFile(pendingTodosFile, (function (todos) {
            return Belt_Array.concat(todos, newTodos);
          }));
    console.log("Added todo: \"" + newTodos.join("\",\"") + "\"");
  }
  
}

function cmdDelTodo(todoIds) {
  if (todoIds.length === 0) {
    console.log("Error: Missing NUMBER for deleting todo.");
    return ;
  } else {
    return Belt_Array.forEach(todoIds, (function (id) {
                  var number = Belt_Int.fromString(id);
                  if (number !== undefined) {
                    return updateFile(pendingTodosFile, (function (todos) {
                                  if (number < 1 || number > todos.length) {
                                    console.log("Error: todo #" + String(number) + " does not exist. Nothing deleted.");
                                    return todos;
                                  } else {
                                    console.log("Deleted todo #" + String(number));
                                    return deleteItem(todos, number - 1 | 0);
                                  }
                                }));
                  } else {
                    console.log("Error: todo #" + id + " does not exist. Nothing deleted.");
                    return ;
                  }
                }));
  }
}

function cmdDoneTodo(todoIds) {
  if (todoIds.length === 0) {
    console.log("Error: Missing NUMBER for marking todo as done.");
    return ;
  } else {
    return Belt_Array.forEach(todoIds, (function (id) {
                  var number = Belt_Int.fromString(id);
                  if (number !== undefined) {
                    var todos = readTodos(pendingTodosFile);
                    if (number < 1 || number > todos.length) {
                      console.log("Error: todo #" + String(number) + " does not exist.");
                      return ;
                    }
                    var completedTodo = Caml_array.get(todos, number - 1 | 0);
                    writeTodos(pendingTodosFile, deleteItem(todos, number - 1 | 0));
                    appendTodos(completedTodosFile, completedTodo);
                    console.log("Marked todo #" + String(number) + " as done.");
                    return ;
                  }
                  console.log("Error: todo #" + id + " does not exist. ");
                  
                }));
  }
}

function cmdReport(param) {
  var pending = readTodos(pendingTodosFile).length;
  var completed = readTodos(completedTodosFile).length;
  console.log(Curry._1(getToday, undefined) + " Pending : " + String(pending) + " Completed : " + String(completed));
  
}

function cmdHelp(param) {
  console.log(help);
  
}

var argv = process.argv;

var argc = argv.length;

if (argc <= 2) {
  console.log(help);
} else {
  var command = Caml_array.get(argv, 2);
  var args = argc > 3 ? Belt_Array.sliceToEnd(argv, 3) : [];
  switch (command) {
    case "add" :
        cmdAddTodo(args);
        break;
    case "del" :
        cmdDelTodo(args);
        break;
    case "done" :
        cmdDoneTodo(args);
        break;
    case "ls" :
        cmdLs(undefined);
        break;
    case "report" :
        cmdReport(undefined);
        break;
    default:
      console.log(help);
  }
}

exports.getToday = getToday;
exports.encoding = encoding;
exports.pendingTodosFile = pendingTodosFile;
exports.completedTodosFile = completedTodosFile;
exports.help = help;
exports.removeEmpty = removeEmpty;
exports.readTodos = readTodos;
exports.writeTodos = writeTodos;
exports.updateFile = updateFile;
exports.appendTodos = appendTodos;
exports.deleteItem = deleteItem;
exports.cmdLs = cmdLs;
exports.cmdAddTodo = cmdAddTodo;
exports.cmdDelTodo = cmdDelTodo;
exports.cmdDoneTodo = cmdDoneTodo;
exports.cmdReport = cmdReport;
exports.cmdHelp = cmdHelp;
exports.argv = argv;
exports.argc = argc;
/* help Not a pure module */
